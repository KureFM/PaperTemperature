<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Subject01Title01" xml:space="preserve">
    <value>Ancient Paper</value>
  </data>
  <data name="Subject01Title02" xml:space="preserve">
    <value>Cai Hou Paper</value>
  </data>
  <data name="Subject01Title03" xml:space="preserve">
    <value>Rice Paper</value>
  </data>
  <data name="Subject01Title04" xml:space="preserve">
    <value>Cheng Core</value>
  </data>
  <data name="Subject01Title05" xml:space="preserve">
    <value>Xue Tao Letter</value>
  </data>
  <data name="Subject01Title06" xml:space="preserve">
    <value>Conclusion</value>
  </data>
  <data name="Subject02Title01" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="Subject02Title02" xml:space="preserve">
    <value>Chong Ci Fig</value>
  </data>
  <data name="Subject02Title03" xml:space="preserve">
    <value>Miao June Six</value>
  </data>
  <data name="Subject02Title04" xml:space="preserve">
    <value>Cried marry</value>
  </data>
  <data name="Subject02Title05" xml:space="preserve">
    <value>Spring in March</value>
  </data>
  <data name="Subject02Title06" xml:space="preserve">
    <value>Milling of Xiang Xi</value>
  </data>
  <data name="Subject02Title07" xml:space="preserve">
    <value>Drought FIG</value>
  </data>
  <data name="Subject02Title08" xml:space="preserve">
    <value>Epilogue</value>
  </data>
  <data name="Subject04Title01" xml:space="preserve">
    <value>3D printing pen</value>
  </data>
  <data name="Subject04Title02" xml:space="preserve">
    <value>Folding umbrella</value>
  </data>
  <data name="Subject04Title03" xml:space="preserve">
    <value>Telescopic cartons</value>
  </data>
  <data name="Subject04Title04" xml:space="preserve">
    <value>With optical pumping paper</value>
  </data>
  <data name="Subject04Title05" xml:space="preserve">
    <value>Windy paper tables</value>
  </data>
  <data name="Subject04Title06" xml:space="preserve">
    <value>Paper hanger</value>
  </data>
  <data name="Subject04Title07" xml:space="preserve">
    <value>Coat paper vase</value>
  </data>
  <data name="Subject04Title08" xml:space="preserve">
    <value>Church made of paper</value>
  </data>
  <data name="Subject04Title09" xml:space="preserve">
    <value>Stationery Scarves</value>
  </data>
  <data name="Subject04Title10" xml:space="preserve">
    <value>Folding boxboard Phone</value>
  </data>
  <data name="Subject04Title11" xml:space="preserve">
    <value>Lightweight paper shoes</value>
  </data>
  <data name="Subject04Title12" xml:space="preserve">
    <value>Pulp helmet</value>
  </data>
  <data name="Subject04Title13" xml:space="preserve">
    <value>Paper bamboo straw</value>
  </data>
  <data name="Subject04Title14" xml:space="preserve">
    <value>Cooling wrapping</value>
  </data>
  <data name="Subject04Title15" xml:space="preserve">
    <value>Bicycle cardboard puzzle</value>
  </data>
  <data name="Subject05Title01" xml:space="preserve">
    <value>Mini Power Emergency paper battery</value>
  </data>
  <data name="Subject05Title02" xml:space="preserve">
    <value>Paper pair of shoes</value>
  </data>
  <data name="Subject05Title03" xml:space="preserve">
    <value>Cardboard speaker phone</value>
  </data>
  <data name="Subject05Title04" xml:space="preserve">
    <value>Controllable paper airplane</value>
  </data>
  <data name="Subject05Title05" xml:space="preserve">
    <value>LED Light Cell paper</value>
  </data>
  <data name="Subject05Title06" xml:space="preserve">
    <value>Paper U disk card</value>
  </data>
  <data name="Subject05Title07" xml:space="preserve">
    <value>Temperature Stickers</value>
  </data>
  <data name="Subject05Title08" xml:space="preserve">
    <value>Paper can shoot camera</value>
  </data>
  <data name="Subject05Title09" xml:space="preserve">
    <value>
Electronic paper displays</value>
  </data>
  <data name="Subject05Title10" xml:space="preserve">
    <value>Mondrian paper notes</value>
  </data>
</root>